import subprocess
import sys
import os
import json
import streamlit as st
import pandas as pd
import plotly.express as px


st.set_page_config(
    page_title="Simulador de Escalonamento de Processos",
    layout="wide",
    page_icon="⚙️"
)

exe = 'build/simulador.exe' if sys.platform.startswith('win') else './build/simulador'

st.sidebar.title("Configurações")

# --- Radio de seleção única ---
opcao = st.sidebar.radio(
    "Modo de geração de processos:",
    options=["Nenhum", "Fixos", "Aleatórios"],
    index=0,
    horizontal=False
)

def limpar_tudo():
    for f in os.listdir('results'):
        if f.endswith('.json'):
            os.remove(os.path.join('results', f))

# --- Geração dos dados (fixos ou aleatórios) ---
# Só executa uma vez! (flag de controle)
processos_gerados = False

if opcao == "Nenhum":
    limpar_tudo()
    st.sidebar.info("Selecione uma opção para gerar processos.")

elif opcao == "Fixos":
    limpar_tudo()
    subprocess.run([exe, "--fixed"], check=True)
    processos_gerados = True
    st.sidebar.success("Processos fixos gerados!")

elif opcao == "Aleatórios":
    # Exibe botão apenas no modo aleatório
    if st.sidebar.button("Gerar Novos Aleatórios"):
        limpar_tudo()
        subprocess.run([exe, "--random"], check=True)
        processos_gerados = True
        st.sidebar.success("Novos processos aleatórios gerados!")
    # Só marca processos_gerados=True se o arquivo já existir!
    elif os.path.exists("results/dados_originais.json"):
        processos_gerados = True

st.title("Simulador de Escalonamento de Processos")

# Tabela dos processos iniciais
orig_path = "results/dados_originais.json"
if processos_gerados and os.path.exists(orig_path):
    with open(orig_path) as f:
        orig_data = json.load(f)
    df_iniciais = pd.DataFrame(orig_data["processos"])
    st.subheader("Processos Gerados (Iniciais)")
    st.dataframe(df_iniciais.set_index("pid")[["chegada", "execucao", "prioridade"]])
else:
    st.info("Gere os processos para visualizar a tabela inicial.")

# Seleção de algoritmos (após gerar os processos)
algos = st.sidebar.multiselect(
    "Selecione um ou mais algoritmos:",
    options=["FIFO", "SJF", "PRIORIDADE", "LOTTERY"],
)

color_map = {
    1: "#3366cc", 2: "#dc3912", 3: "#ff9900", 4: "#109618",
    5: "#990099", 6: "#0099c6", 7: "#dd4477", 8: "#66aa00",
    9: "#b82e2e", 10: "#316395"
}

# Execução e apresentação dos algoritmos selecionados
if processos_gerados and os.path.exists(orig_path) and algos:
    for algo in algos:
        res_path = f"results/{algo.lower()}.json"
        # Só gera resultado do algoritmo se NÃO existir (usa dados já existentes)
        if not os.path.exists(res_path):
            flag = "--fixed" if opcao == "Fixos" else "--random"
            subprocess.run([exe, flag, algo], check=True)
        if not os.path.exists(res_path):
            st.error(f"Arquivo não encontrado: {res_path}")
            continue
        data = json.load(open(res_path))
        df = pd.DataFrame(data["processos"])
        st.subheader(f"Resultado: {algo}")
        st.dataframe(df.set_index("pid"))

        # --- Gráfico Gantt customizado ---
        timeline = data.get("timeline", [])
        if timeline:
            segments = []
            current = timeline[0]
            start = 0
            for i, pid in enumerate(timeline):
                if pid != current:
                    segments.append({"pid": current, "start": start, "end": i})
                    current = pid
                    start = i
            segments.append({"pid": current, "start": start, "end": len(timeline)})
            gantt_df = pd.DataFrame(segments)
            gantt_df["Processo"] = gantt_df["pid"].astype(str)
            gantt_df["duration"] = gantt_df["end"] - gantt_df["start"]

            todos_pids = df_iniciais["pid"].astype(str).tolist()
            todos_pids.sort(key=int)  # Garante ordem crescente
            
            fig = px.bar(
                gantt_df,
                x="duration",
                y="Processo",
                base="start",
                orientation="h",
                color="Processo",
                color_discrete_map={str(pid): color_map[pid] for pid in gantt_df["pid"].unique()},
                title=f"Gantt: {algo}",
                category_orders={"Processo": todos_pids}
            )

            fig.update_yaxes(autorange="reversed", title="Processo")
            max_end = gantt_df["end"].max()
            fig.update_xaxes(title="Tempo (ticks)", range=[0, max_end])
            fig.update_layout(showlegend=False, height=320)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Nenhuma linha do tempo disponível para este algoritmo.")
